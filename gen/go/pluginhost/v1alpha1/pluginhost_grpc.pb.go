// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LilbotPluginHostServiceClient is the client API for LilbotPluginHostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LilbotPluginHostServiceClient interface {
	// Register a plugin with the host.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type lilbotPluginHostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLilbotPluginHostServiceClient(cc grpc.ClientConnInterface) LilbotPluginHostServiceClient {
	return &lilbotPluginHostServiceClient{cc}
}

func (c *lilbotPluginHostServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/pluginhost.v1alpha1.LilbotPluginHostService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LilbotPluginHostServiceServer is the server API for LilbotPluginHostService service.
// All implementations must embed UnimplementedLilbotPluginHostServiceServer
// for forward compatibility
type LilbotPluginHostServiceServer interface {
	// Register a plugin with the host.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedLilbotPluginHostServiceServer()
}

// UnimplementedLilbotPluginHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLilbotPluginHostServiceServer struct {
}

func (UnimplementedLilbotPluginHostServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedLilbotPluginHostServiceServer) mustEmbedUnimplementedLilbotPluginHostServiceServer() {
}

// UnsafeLilbotPluginHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LilbotPluginHostServiceServer will
// result in compilation errors.
type UnsafeLilbotPluginHostServiceServer interface {
	mustEmbedUnimplementedLilbotPluginHostServiceServer()
}

func RegisterLilbotPluginHostServiceServer(s grpc.ServiceRegistrar, srv LilbotPluginHostServiceServer) {
	s.RegisterService(&LilbotPluginHostService_ServiceDesc, srv)
}

func _LilbotPluginHostService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LilbotPluginHostServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginhost.v1alpha1.LilbotPluginHostService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LilbotPluginHostServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LilbotPluginHostService_ServiceDesc is the grpc.ServiceDesc for LilbotPluginHostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LilbotPluginHostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pluginhost.v1alpha1.LilbotPluginHostService",
	HandlerType: (*LilbotPluginHostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LilbotPluginHostService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginhost/v1alpha1/pluginhost.proto",
}
